{"version":3,"sources":["components/Order/Order.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","Order","order","props","toppings","toppingName","push","name","amount","toppingOutput","map","topp","react_default","a","createElement","style","textTransform","display","margin","border","padding","key","className","classes","Number","parseFloat","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","Order_Order","id","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,MAAA,oJCoCHC,EAjCD,SAACC,GAEX,IAAMC,EAAW,GAEjB,IAAK,IAAIC,KAAeF,EAAMC,SAC1BA,EAASE,KACL,CACIC,KAAMF,EACNG,OAAQL,EAAMC,SAASC,KAKnC,IAAMI,EAAgBL,EAASM,IAAI,SAAAC,GAC/B,OAAOC,EAAAC,EAAAC,cAAA,QACHC,MAAO,CACHC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,OAEbC,IAAKV,EAAKJ,MAAOI,EAAKJ,KARnB,KAQ2BI,EAAKH,OARhC,QAWX,OACII,EAAAC,EAAAC,cAAA,OAAKQ,UAAWC,IAAQtB,OACpBW,EAAAC,EAAAC,cAAA,sBAAcL,GACdG,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,qBAAaU,OAAOC,WAAWtB,EAAMuB,OAAOC,QAAQ,uCCvBpEC,8LAGEC,KAAK1B,MAAM2B,cAAcD,KAAK1B,MAAM4B,MAAOF,KAAK1B,MAAM6B,yCAOtD,IAAIC,EAASrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,MAUb,OATKL,KAAK1B,MAAMgC,UACZF,EAASJ,KAAK1B,MAAM8B,OAAOvB,IAAI,SAAAR,GAAK,OAC5BU,EAAAC,EAAAC,cAACsB,EAAD,CACIf,IAAKnB,EAAMmC,GACXjC,SAAUF,EAAME,SAChBsB,MAAOxB,EAAMwB,WAKzBd,EAAAC,EAAAC,cAAA,WACKmB,UAtBIK,aA4CNC,sBAfS,SAAAC,GACpB,MAAO,CACHP,OAAQO,EAAMtC,MAAM+B,OACpBE,QAASK,EAAMtC,MAAMiC,QACrBJ,MAAOS,EAAMC,KAAKV,MAClBC,OAAQQ,EAAMC,KAAKT,SAIA,SAAAU,GACvB,MAAO,CACHZ,cAAe,SAACC,EAAOC,GAAR,OAAmBU,EAASC,IAAoBZ,EAAOC,OAI/DO,CAA6CK,YAAiBhB,EAAQiB","file":"static/js/5.bbd0b43d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"_4yi4ZpfqAgHINYViIZYP6\"};","import React from 'react';\n\nimport classes from './Order.css';\n\nconst order = (props) => {\n    // Logic to turn the ingredients into an array of values\n    const toppings = [];\n\n    for (let toppingName in props.toppings) {\n        toppings.push(\n            {\n                name: toppingName, \n                amount: props.toppings[toppingName]\n            }\n        );\n    }\n\n    const toppingOutput = toppings.map(topp => {\n        return <span\n            style={{\n                textTransform: 'capitalize',\n                display: 'inline-block',\n                margin: '0 8px',\n                border: '1px solid #ccc',\n                padding: '5px'\n            }}\n            key={topp.name}>{topp.name} ({topp.amount}) </span>;\n    });\n\n    return (\n        <div className={classes.Order}>\n            <p>Toppings: {toppingOutput}</p>\n            <p>Price: <strong>USD {Number.parseFloat(props.price).toFixed(2)}</strong></p>\n        </div>\n    );\n};\n\nexport default order;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nclass Orders extends Component {\n\n    componentDidMount () {\n        this.props.onFetchOrders(this.props.token, this.props.userId);\n    }\n\n    //Below is another alternative to changing a string, because in JSON, to a value\n    // price={+order.price}\n\n    render () {\n        let orders = <Spinner />;\n        if (!this.props.loading) {\n            orders = this.props.orders.map(order => (\n                    <Order \n                        key={order.id}\n                        toppings={order.toppings}\n                        price={order.price} />\n                    )\n            );\n        }\n        return (\n            <div>\n                {orders}\n            </div>\n        );\n    }\n}\n\n// Taken from the reducer file state\nconst mapStateToProps = state => {\n    return {\n        orders: state.order.orders,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));"],"sourceRoot":""}