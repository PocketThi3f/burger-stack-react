{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.js","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","ContactData","CheckoutSummary","state","orderForm","name","type","placeholder","validation","required","valid","email","street","country","deliveryMethod","formIsValid","loading","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","order","toppings","topps","price","orderData","userId","onOpenOrder","token","inputChangedHandler","inputIdentifier","updatedFormElement","updatedObject","target","checkValidity","updatedOrderForm","defineProperty","console","log","setState","_this2","this","formElementsArray","id","config","form","react_default","onSubmit","formElement","Button","btnType","clicked","disabled","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","checkoutSummary","style","width","margin","Burger","onCheckoutFail","onCheckoutPass","Checkout","history","goBack","replace","onInitPurchase","summary","react_router","to","purchaseRedirect","purchased","CheckoutSummary_CheckoutSummary","path","match","component"],"mappings":"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","file":"static/js/3.ee02d8f0.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    // Accomodating the different types of inputs\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('select'):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value}/>;\n            break;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"s67N0w35nKdhFxX_3zncw\",\"Label\":\"_n-1my-7YxR9EuzWR3hhB\",\"InputElement\":\"_2-aFxd6_SUnHTHpTf8dvYS\",\"Invalid\":\"_1sl1p7M77V1I9nxTQviKpw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"_1J81rlRO5zxuF98VMkEamZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"_1xBm4j5hECL-q6sCIhiBB4\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\n\nimport classes from './ContactData.css';\nimport axios from '../../../axios-orders';\nimport * as actions from '../../../store/actions/index';\nimport { updatedObject, checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: { \n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Email'\n                },\n                value: '',\n                valid: true,\n                touched: false \n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                valid: true,\n                touched: false \n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false \n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'car', displayValue: 'Car Delivery'},\n                        {value: 'bicycle', displayValue: 'Bicycle Delivery'}\n                    ]\n                },\n                value: 'car',\n                validation: {},\n                valid: true,\n                touched: false\n            }\n        },\n        formIsValid: false,\n        loading: false\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n        // console.log(this.props.toppings);\n        // Create a path with new name\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order = {\n            toppings: this.props.topps,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n\n        this.props.onOpenOrder(order, this.props.token);\n    }\n\n    // When input is passed or text changes in the input box, listen to changes\n    inputChangedHandler = (event, inputIdentifier) => {\n        // console.log(event.target.value);\n        // Cloned version of the orderform\n        const updatedFormElement = updatedObject(this.state.orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n            touched: true\n        });\n        const updatedOrderForm = updatedObject(this.state.orderForm, {\n            [inputIdentifier]: updatedFormElement\n        });\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid\n        }\n\n        console.log(updatedFormElement);\n        this.setState({\n            orderForm: updatedOrderForm,\n            formIsValid: formIsValid\n        });\n    }\n\n    render () {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {/* <Input elementType=\"...\" elementConfig=\"...\" value=\"...\" /> */}\n                {formElementsArray.map(formElement => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button btnType=\"Success\" \n                    clicked={this.orderHandler}\n                    disabled={!this.state.formIsValid}>Place Order</Button>\n            </form>\n        );\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Fill Out Your Information For Delivery</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        topps: state.burgerBuilder.toppings,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOpenOrder: (orderData, token) => dispatch(actions.burgerOpenOrder(orderData, token))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\n\nimport classes from './CheckoutSummary.css';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>Enjoy It, Lad.</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger toppings={props.toppings} />\n            </div>\n            <Button \n                btnType=\"Danger\" \n                clicked={props.onCheckoutFail}>Deny</Button>\n            <Button \n                btnType=\"Success\"\n                clicked={props.onCheckoutPass}>Accept</Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary;","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport ContactData from '../Checkout/ContactData/ContactData';\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport * as actions from '../../store/actions/index';\n\nclass Checkout extends Component {\n\n    // state ={\n    //     toppings: null,\n    //     price: 0\n    // }\n\n    // componentWillMount () {\n    //     const query = new URLSearchParams(this.props.location.search);\n    //     const toppings = {};\n    //     let price = 0;\n    //     for (let param of query.entries()) {\n    //         if (param[0] === 'price') {\n    //             price = param[1];\n    //         }\n    //         else {\n    //             toppings[param[0]] = +param[1];\n    //         }\n    //     }\n    //     this.setState({\n    //         toppings: toppings,\n    //         totalPrice: price\n    //     });\n    // }\n\n    // Lifecycle method\n    componentWillMount () {\n        this.props.onInitPurchase();\n    }\n\n    // When you cancel the meal purchase, go back a page\n    onCheckoutFail = () => {\n        this.props.history.goBack();\n    }\n\n    // When submitting meal purchase, continues data\n    onCheckoutPass = () => {\n        this.props.history.replace('/checkout/contact-data');\n    }\n\n    render () {\n        let summary = <Redirect to='/' />;\n        if (this.props.topps) {\n            const purchaseRedirect = this.props.purchased ? <Redirect to='/' /> : null;\n            summary = (\n                <div>\n                {purchaseRedirect}\n                <CheckoutSummary \n                    toppings={this.props.topps}\n                    onCheckoutFail={this.onCheckoutFail}\n                    onCheckoutPass={this.onCheckoutPass} />\n                <Route \n                    path={this.props.match.path + '/contact-data'} \n                    component={ContactData} />\n                    {/* render={(props) => (<ContactData toppings={this.state.toppings} price={this.state.totalPrice} {...props} />)} */}\n                </div>\n            );\n        }\n        return summary;\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        topps: state.burgerBuilder.toppings,\n        purchased: state.order.purchased\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onInitPurchase: () => dispatch(actions.purchaseInit())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Checkout);"],"sourceRoot":""}